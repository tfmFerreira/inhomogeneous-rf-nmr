%Anika Wurl and Tiago Mendes Ferreira 
%2021

clear all

%% PULSE SEQUENCES
%1 RPDLF with INEPT for CH2 (l1=9)
%2 RPDLF_CH2 (l1=9)
%3 RPDLF_CH2 no propagator (l1=2)
%4 CP for CH
%5 INEPT for CH2
%6 DROSS with INEPT for CH
%7 SDROSS with INEPT for CH

ps=["RPDLF_INEPT_CH2" ...        1
         "RPDLF_CH2" ...         2
         "RPDLF_CP_CH2" ...      3
         "RPDLF_CH2_noprop" ...  4
         "CP_CH2" ...            5
         "INEPT_CH2" ...         6
         "DROSS_CH" ...          7
         "SDROSS_CH"];...        8
              

%% INPUTS

%pulse sequence
pulse_seq=1;

%B1 misseting
devC=[0];%shift 13C B1 profile by constant 
devH=[0];%shift 1H B1 profile by constant 

%dipole-dipole
dip1=0.001:0.001:0.5; %heteronuclear dipole coupling C-Ha
%dip1=[0.1]; %heteronuclear dipole coupling C-Ha
dip1=dip1*-22000;
%dip1=-.1*22000;
dip2=dip1; %heteronuclear dipole coupling C-Hb

dipHH=[0];%homonuclear dipole coupling Ha-Hb

%CSA 
CSAH=0;%CSA anisotropy in ppm for 1H
CSAC=0;%CSA anisotropy in ppm for 13C

%offsets
shiftH=[0]; %1H offset in ppm
shiftC=0; %13C offset in ppm

%repulsion file and number of gamma angles
rep=2000;
gamma=1;
maxdt=1;

%MAS rate
MAS=5150; 

%number of points simulated and phase cycle steps
np=128;
phasecycle=1;

%gaussian B1 inhomogeneity (points=1 is no inhomogeneity)
points=40;
width=40;
x=linspace(-width/2,width/2,points);

%sigmaH=[50 45 40 35 55 60];
sigmaH=[40];
sigmaC=sigmaH;

%% OUTER LOOP OVER INPUT VECTORS

for m=1:length(sigmaH)
gaussH=exp(-(x).^2./(sigmaH(m)^2));    
for mm=1:length(devC)
for nn=1:length(shiftH)
for nnn=1:length(devH)
for nnnn=1:length(dip1)
    
if length(x) == 1
  omega=1+devH(nnn);
  omegaC=1+devH(nnn);
else
   omega=gaussH+devH(nnn);
  omegaC=gaussH+devC(mm);
end
    
acc=(1.0-omega).*100; % deviation from 100% accuracy in %
accb=(1.0-omegaC).*100; 



%% SIMPSON SIMULATIONS - LOOP OVER B1 PROFILE
% the simpson files are generated by the .m script in folder "Pulse_sequences" selected with pulse_seq above
% TDarray is a matrix with columns for each B1 value in the gaussian B1 profile selected 
TDarray=zeros(np,size(acc,2)+1);
cd Pulse_Sequences
expression0=[ps(pulse_seq);"('NP',np,'acc',acc(i),'accb',accb(i),'dip1',dip1(nnnn),'dip2',dip2(nnnn),'dipHH',dipHH,'phasecount',ii,'shiftH',shiftH(nn),'shiftC',shiftC,'CSAH',CSAH,'CSAC',CSAC,'rep',rep,'MAS',MAS,'gamma',gamma,'maxdt',maxdt)"];
expression=join(expression0,"");
for i=1:size(acc,2)
    for ii=1:phasecycle
   eval(expression)
   cd ../TMP
   system('simpson tmp.in');
   TDdata=load('tmp_TD.dat');
   TDarray(:,i+1)=TDdata(:,2);
   if i==1
       TDarray(:,1)=TDdata(:,1);
   end
   cd ../Pulse_Sequences
    end 
end
cd ..

%%  PROCESSING OF SIMULATED DATA 
% commented lines for figures/checks 

t1=TDarray(:,1);
S=zeros(np,1);

% Integrating over all omega
for i=1:size(TDarray,2)-1   
    S=S+TDarray(:,i+1);
    %plot(t1*1000,TDarray(:,i+1),'o-'), hold on
    pos=find(TDarray(:,i+1) == min(TDarray(:,i+1)));
end

% Fourier Transform 
lb2=1;
si2 = np;  
Stemp = S/S(1);
Stempplot = S;
Stemp(1) = 0.5*Stemp(1);       
swh2 = 1/(t1(2)-t1(1));
si2=length(t1)+1;
nu2 = swh2/2*linspace(-1, 1, si2);
Itemp = fftshift(fft(Stemp,si2));

figure(1), 
subplot(2,1,1), plot(t1,Stempplot,'s-'), hold on
subplot(2,1,2), plot(nu2,real(Itemp),'-o'), hold on



%% SAVING DATA
% file name specifies inputs

if shiftH(nn) >= 0
Hshift=floor(shiftH(nn));
Cshift=floor(shiftC);
shiftdecimalsH=(shiftH(nn)-floor(shiftH(nn)))*100;
shiftdecimalsC=(shiftC-floor(shiftC))*100;
CSAdecimalsH=(CSAH-floor(CSAH))*100;
CSAdecimalsC=(CSAC-floor(CSAC))*100;
else
Hshift=ceil(shiftH(nn));
Cshift=floor(shiftC);
shiftdecimalsH=-(shiftH(nn)-ceil(shiftH(nn)))*100;
shiftdecimalsC=(shiftC-floor(shiftC))*100;
CSAdecimalsH=(CSAH-floor(CSAH))*100;
CSAdecimalsC=(CSAC-floor(CSAC))*100;
end


expression=["cd Results/"; ps(pulse_seq) ];
eval(join(expression,""))
if length(x) > 1
    
eval(['save model_gauss_width_' num2str(width) '_points_' num2str(points) ...
    '_sigmaH_' num2str(round(sigmaH(m))) '_sigmaC_' num2str(round(sigmaC(m))) ...
    '_dip1_' num2str(round(dip1(nnnn))) '_dip2_' num2str(round(dip2(nnnn))) '_dipHH_' num2str(round(dipHH)) ...
    '_devH_' num2str(round(devH(nnn)*100)) '_devC_' num2str(round(devC(mm)*100)) ...
    '_shiftH_' num2str(Hshift) 'p' num2str(round(shiftdecimalsH)) ...
    '_shiftC_' num2str(Cshift) 'p' num2str(round(shiftdecimalsC)) ...
    '_CSAH_' num2str(floor(CSAH)) 'p' num2str(round(CSAdecimalsH)) ...
    '_CSAC_' num2str(floor(CSAC)) 'p' num2str(round(CSAdecimalsC)) ...
    '_pc_' num2str(phasecycle) ...
    '_rep' num2str(rep) ...
    '_gamma_' num2str(gamma) ...
    '_MAS_' num2str(MAS) ...
    ' t1 S omega Itemp nu2 Stemp'])

else
    
eval(['save model_ideal_dip1_' num2str(round(dip1(nnnn))) '_dip2_' num2str(round(dip2(nnnn))) '_dipHH_' num2str(round(dipHH)) ...
    '_devH_' num2str(round(devH(nnn)*100)) '_devC_' num2str(round(devC(mm)*100)) ...
    '_shiftH_' num2str(floor(shiftH(nn))) 'p' num2str(round(shiftdecimalsH)) ...
    '_shiftC_' num2str(floor(shiftC)) 'p' num2str(round(shiftdecimalsC)) ...
    '_CSAH_' num2str(floor(CSAH)) 'p' num2str(round(CSAdecimalsH)) ...
    '_CSAC_' num2str(floor(CSAC)) 'p' num2str(round(CSAdecimalsC)) ...
    '_pc_' num2str(phasecycle) ...
    '_rep' num2str(rep) ...
    '_gamma_' num2str(gamma) ...
    '_MAS_' num2str(MAS) ...
    ' t1 S omega Itemp nu2 Stemp'])
    
end
cd ../..
end
end
end
end
end
